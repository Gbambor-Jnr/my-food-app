{"ast":null,"code":"var _jsxFileName = \"/Users/gbamborjnr/Documents/REACT PROJECTS/Miracool App/src/Components/Store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./food-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  items: [],\n  totalAmount: 0\n};\n\nconst reducer = (action, state) => {\n  //   if (action.type === \"ADD\") {\n  //     const updatedAmount =\n  //       state.totalAmount + action.item.price * action.item.amount;\n  //     const existingCartIndex = state.items.findIndex(\n  //       (item) => item.id === action.item.id\n  //     );\n  //     const existingItem = state.items[existingCartIndex];\n  //     let updatedItems;\n  //     if (existingItem) {\n  //       const updatedItem = {\n  //         ...existingItem,\n  //         amount: existingItem.amount + action.item.amount,\n  //       };\n  //       updatedItems = [...state.items];\n  //       updatedItems[existingCartIndex] = updatedItem;\n  //     } else {\n  //       updatedItems = state.items.concat(action.item);\n  //     }\n  //     return { items: updatedItems, totalAmount: updatedAmount };\n  //   }\n  return defaultValue;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchState] = useReducer(reducer, defaultValue);\n\n  const addItemHandler = item => {\n    dispatchState({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemHandler = id => {\n    dispatchState({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartValue = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItems: addItemHandler,\n    removeItems: removeItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"gFjNm9JC+dFTq8nWB8zipRZady4=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/gbamborjnr/Documents/REACT PROJECTS/Miracool App/src/Components/Store/CartProvider.js"],"names":["useReducer","CartContext","defaultValue","items","totalAmount","reducer","action","state","CartProvider","props","cartState","dispatchState","addItemHandler","item","type","removeItemHandler","id","cartValue","addItems","removeItems","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAOL,YAAP;AACD,CAtBD;;AAwBA,MAAMM,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,aAAZ,IAA6BX,UAAU,CAACK,OAAD,EAAUH,YAAV,CAA7C;;AAEA,QAAMU,cAAc,GAAIC,IAAD,IAAU;AAC/BF,IAAAA,aAAa,CAAC;AAAEG,MAAAA,IAAI,EAAE,KAAR;AAAeD,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAb;AACD,GAFD;;AAIA,QAAME,iBAAiB,GAAIC,EAAD,IAAQ;AAChCL,IAAAA,aAAa,CAAC;AAAEG,MAAAA,IAAI,EAAE,QAAR;AAAkBE,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAb;AACD,GAFD;;AAIA,QAAMC,SAAS,GAAG;AAChBd,IAAAA,KAAK,EAAEO,SAAS,CAACP,KADD;AAEhBC,IAAAA,WAAW,EAAEM,SAAS,CAACN,WAFP;AAGhBc,IAAAA,QAAQ,EAAEN,cAHM;AAIhBO,IAAAA,WAAW,EAAEJ;AAJG,GAAlB;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,SAA7B;AAAA,cACGR,KAAK,CAACW;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtBD;;GAAMZ,Y;;KAAAA,Y;AAwBN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\nimport CartContext from \"./food-context\";\n\nconst defaultValue = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst reducer = (action, state) => {\n  //   if (action.type === \"ADD\") {\n  //     const updatedAmount =\n  //       state.totalAmount + action.item.price * action.item.amount;\n  //     const existingCartIndex = state.items.findIndex(\n  //       (item) => item.id === action.item.id\n  //     );\n  //     const existingItem = state.items[existingCartIndex];\n  //     let updatedItems;\n  //     if (existingItem) {\n  //       const updatedItem = {\n  //         ...existingItem,\n  //         amount: existingItem.amount + action.item.amount,\n  //       };\n  //       updatedItems = [...state.items];\n  //       updatedItems[existingCartIndex] = updatedItem;\n  //     } else {\n  //       updatedItems = state.items.concat(action.item);\n  //     }\n  //     return { items: updatedItems, totalAmount: updatedAmount };\n  //   }\n  return defaultValue;\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchState] = useReducer(reducer, defaultValue);\n\n  const addItemHandler = (item) => {\n    dispatchState({ type: \"ADD\", item: item });\n  };\n\n  const removeItemHandler = (id) => {\n    dispatchState({ type: \"REMOVE\", id: id });\n  };\n\n  const cartValue = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItems: addItemHandler,\n    removeItems: removeItemHandler,\n  };\n  return (\n    <CartContext.Provider value={cartValue}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}