{"ast":null,"code":"var _jsxFileName = \"/Users/gbamborjnr/Documents/REACT PROJECTS/Miracool App/src/Components/Store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./food-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  items: [],\n  totalAmount: 0\n};\n\nconst reducer = (action, state) => {\n  if (action.type === \"ADD\") {\n    const updatedAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingItem = state.items[existingCartIndex];\n    let updatedItems;\n\n    if (existingItem) {\n      const mumu = state.items[existingCartIndex];\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount + action.item.amount\n      };\n    }\n  }\n\n  return {\n    items: [],\n    totalAmount: 0\n  };\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchState] = useReducer(reducer, defaultValue);\n\n  const addItemHandler = item => {\n    dispatchState({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemHandler = id => {\n    dispatchState({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartValue = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItems: item => {},\n    removeItems: id => {}\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"gFjNm9JC+dFTq8nWB8zipRZady4=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/gbamborjnr/Documents/REACT PROJECTS/Miracool App/src/Components/Store/CartProvider.js"],"names":["useReducer","CartContext","defaultValue","items","totalAmount","reducer","action","state","type","updatedAmount","item","price","amount","existingCartIndex","findIndex","id","existingItem","updatedItems","mumu","updatedItem","CartProvider","props","cartState","dispatchState","addItemHandler","removeItemHandler","cartValue","addItems","removeItems","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACjC,MAAID,MAAM,CAACE,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,aAAa,GACjBF,KAAK,CAACH,WAAN,GAAoBE,MAAM,CAACI,IAAP,CAAYC,KAAZ,GAAoBL,MAAM,CAACI,IAAP,CAAYE,MADtD;AAEA,UAAMC,iBAAiB,GAAGN,KAAK,CAACJ,KAAN,CAAYW,SAAZ,CACvBJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYT,MAAM,CAACI,IAAP,CAAYK,EADV,CAA1B;AAGA,UAAMC,YAAY,GAAGT,KAAK,CAACJ,KAAN,CAAYU,iBAAZ,CAArB;AACA,QAAII,YAAJ;;AACA,QAAID,YAAJ,EAAkB;AAChB,YAAME,IAAI,GAAGX,KAAK,CAACJ,KAAN,CAAYU,iBAAZ,CAAb;AACA,YAAMM,WAAW,GAAG,EAClB,GAAGH,YADe;AAElBJ,QAAAA,MAAM,EAAEI,YAAY,CAACJ,MAAb,GAAsBN,MAAM,CAACI,IAAP,CAAYE;AAFxB,OAApB;AAID;AACF;;AACD,SAAO;AAAET,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,WAAW,EAAE;AAA1B,GAAP;AACD,CAlBD;;AAoBA,MAAMgB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,aAAZ,IAA6BvB,UAAU,CAACK,OAAD,EAAUH,YAAV,CAA7C;;AAEA,QAAMsB,cAAc,GAAId,IAAD,IAAU;AAC/Ba,IAAAA,aAAa,CAAC;AAAEf,MAAAA,IAAI,EAAE,KAAR;AAAeE,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAb;AACD,GAFD;;AAIA,QAAMe,iBAAiB,GAAIV,EAAD,IAAQ;AAChCQ,IAAAA,aAAa,CAAC;AAAEf,MAAAA,IAAI,EAAE,QAAR;AAAkBO,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAb;AACD,GAFD;;AAIA,QAAMW,SAAS,GAAG;AAChBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADD;AAEhBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFP;AAGhBuB,IAAAA,QAAQ,EAAGjB,IAAD,IAAU,CAAE,CAHN;AAIhBkB,IAAAA,WAAW,EAAGb,EAAD,IAAQ,CAAE;AAJP,GAAlB;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEW,SAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtBD;;GAAMT,Y;;KAAAA,Y;AAwBN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\nimport CartContext from \"./food-context\";\n\nconst defaultValue = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst reducer = (action, state) => {\n  if (action.type === \"ADD\") {\n    const updatedAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n    const existingCartIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    const existingItem = state.items[existingCartIndex];\n    let updatedItems;\n    if (existingItem) {\n      const mumu = state.items[existingCartIndex];\n      const updatedItem = {\n        ...existingItem,\n        amount: existingItem.amount + action.item.amount,\n      };\n    }\n  }\n  return { items: [], totalAmount: 0 };\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchState] = useReducer(reducer, defaultValue);\n\n  const addItemHandler = (item) => {\n    dispatchState({ type: \"ADD\", item: item });\n  };\n\n  const removeItemHandler = (id) => {\n    dispatchState({ type: \"REMOVE\", id: id });\n  };\n\n  const cartValue = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItems: (item) => {},\n    removeItems: (id) => {},\n  };\n  return (\n    <CartContext.Provider value={cartValue}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}